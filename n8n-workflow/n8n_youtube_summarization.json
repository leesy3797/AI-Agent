{
  "name": "n8n-youtube-summarization",
  "nodes": [
    {
      "parameters": {
        "resource": "video",
        "operation": "get",
        "videoId": "={{ $json.id.replace(\"yt:video:\", \"\") }}",
        "part": [
          "contentDetails",
          "snippet",
          "id"
        ],
        "options": {}
      },
      "id": "e64cce1f-a10d-427a-abd1-bb8d9ff3b95f",
      "name": "Get video details",
      "type": "n8n-nodes-base.youTube",
      "position": [
        1340,
        -135
      ],
      "typeVersion": 1,
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "RE4BInD7fS4UtA7D",
          "name": "YouTube account"
        }
      },
      "notes": "Make a call to the YouTube API so that we have the thumbnail for the email and the duration to filter out shorts."
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "triggerAtMinute": 47
            }
          ]
        }
      },
      "id": "cb5dd948-9764-4dbc-844d-7af84ffb48fa",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -420,
        -235
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 1,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "5342ecc0-d764-4bef-8161-d1f571fcb931",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.contentDetails.duration }}",
              "rightValue": "\"duration\""
            },
            {
              "id": "b82e3373-a28b-49bd-afa0-4f48cafe2bfe",
              "operator": {
                "type": "number",
                "operation": "gt"
              },
              "leftValue": "={{ Duration.fromISO($json.contentDetails.duration).as('seconds') }}",
              "rightValue": 120
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "f99a92d0-ed60-4f6e-ba53-3907dcbc424a",
      "name": "Filter out shorts",
      "type": "n8n-nodes-base.if",
      "position": [
        1560,
        -135
      ],
      "notesInFlow": false,
      "typeVersion": 2,
      "notes": "Sometime, some live broadcasts that are then posted as regular videos do not have a duration. That is why we check if `duration` is present in `contentDetails`."
    },
    {
      "parameters": {
        "content": "### Default frequency: every hour\nChanging it here is enough if you want to check for new videos at a higher or lower frequency. You don't have to edit anything else.",
        "height": 460,
        "width": 220,
        "color": 7
      },
      "id": "7c08b7df-df4f-4357-9ab3-276fe09f7156",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -480,
        -535
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### Get my subscriptions from the YouTube Data v3 API\nYou can expect to use 1 quota per 50 subscriptions per run, which is well within the 10 000/req a day allowed by default.",
        "height": 460,
        "width": 880,
        "color": 5
      },
      "id": "21f9fb63-3de9-4e67-8a02-427a0199631c",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -260,
        -435
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### Get the 15 latest videos of each channel with RSS\nUsing the YouTube API instead would cost too many quotas to make it viable.",
        "height": 280,
        "width": 440,
        "color": 4
      },
      "id": "221119bf-17c8-4334-b278-3c37254d90d2",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        840,
        -255
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### Call YouTube's API for more data\nWe need the thumbnails for the email and the duration to filter out shorts.",
        "height": 280,
        "width": 420,
        "color": 3
      },
      "id": "04b1411e-8f24-48de-804d-a7ca466aab72",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1290,
        -255
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### Configure your email here\nTo go to the video from the email, simply click on the thumbnail.",
        "height": 280,
        "width": 260,
        "color": 6
      },
      "id": "dbb25399-307f-4233-930e-2c1d99b397c5",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2060,
        -800
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "=https://www.youtube.com/feeds/videos.xml?channel_id={{ $json.snippet.resourceId.channelId }}",
        "options": {}
      },
      "id": "6b91fa79-7957-47e6-a8ef-b8f6f8f8e842",
      "name": "Get latest 15 videos of each channel",
      "type": "n8n-nodes-base.rssFeedRead",
      "position": [
        900,
        -135
      ],
      "typeVersion": 1.1,
      "notes": "YouTube provides an RSS feed for each channel with the 15 latest videos.\nWe use this instead of the YouTube Data v3 API, as search requests cost a lot of \"quota points\" and would easily put us over the daily limit with just one workflow run."
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/subscriptions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "youTubeOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "part",
              "value": "snippet,contentDetails"
            },
            {
              "name": "mine",
              "value": "true"
            },
            {
              "name": "maxResults",
              "value": "50"
            }
          ]
        },
        "options": {
          "pagination": {
            "pagination": {
              "parameters": {
                "parameters": [
                  {
                    "name": "pageToken",
                    "value": "={{ $response.body.nextPageToken }}"
                  }
                ]
              },
              "paginationCompleteWhen": "other",
              "completeExpression": "={{ !('nextPageToken' in $response.body) }}"
            }
          }
        }
      },
      "id": "a68356a2-5225-4e27-a3a3-8554afd085f5",
      "name": "Get my subscriptions",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -200,
        -235
      ],
      "notesInFlow": true,
      "typeVersion": 4.2,
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "RE4BInD7fS4UtA7D",
          "name": "YouTube account"
        }
      },
      "notes": "Get subscriptions from YouTube Data v3 API"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "5972ff90-aa5a-470c-aa96-87138eb60565",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": "error"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b49bfe8b-ef4f-4db8-a541-6929c0b59ada",
      "name": "Check for errors",
      "type": "n8n-nodes-base.if",
      "position": [
        20,
        -235
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "4734ee8c-1655-47be-bd45-a9527aee2833",
              "operator": {
                "type": "number",
                "operation": "gt"
              },
              "leftValue": "={{ $json.contentDetails.newItemCount }}",
              "rightValue": 0
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "6b3e8789-595b-4c96-a531-0825ff7eed1d",
      "name": "Only keep channels with unwatched videos",
      "type": "n8n-nodes-base.filter",
      "position": [
        460,
        -135
      ],
      "typeVersion": 2.2,
      "notes": "It's not a perfect indicator for new videos but helps reduce the amount of channels to process."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "65d905a2-c89e-41f3-a2cf-0d1a76c48d8e",
              "operator": {
                "type": "dateTime",
                "operation": "after"
              },
              "leftValue": "={{ $json.pubDate.toDateTime() }}",
              "rightValue": "={{ \n  $('Schedule Trigger').item.json.timestamp.toDateTime().minus(\n    24,\n    $('Schedule Trigger').params.rule.interval[0].field\n  ).toISO()\n}}"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "4acc51c7-7eb1-4720-b5ab-97a432b10616",
      "name": "Keep only videos published since last run",
      "type": "n8n-nodes-base.filter",
      "position": [
        1120,
        -135
      ],
      "typeVersion": 2.2,
      "notes": "We dynamically figure out the last run's execution time through the settings of the \"Schedule Trigger\" node."
    },
    {
      "parameters": {
        "errorMessage": "=Status code: {{ $json.error.code }}\nMessage: {{ $json.error.message }}"
      },
      "id": "38df6412-fd55-4ee2-95e9-f051b2af30f2",
      "name": "If the HTTP request failed, throw the error",
      "type": "n8n-nodes-base.stopAndError",
      "position": [
        240,
        -335
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fieldToSplitOut": "items",
        "options": {}
      },
      "id": "fcaddb25-0b99-419a-bac4-0c6511f1dd54",
      "name": "Split out subscriptions to process individually",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        240,
        -135
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Manually filter out channels\nTo find the channel ID of a channel, click on the description → Share channel → Copy channel ID",
        "height": 360,
        "width": 220
      },
      "id": "7a71e53b-27ae-4125-a890-63d8783879b1",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        620,
        -335
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "b27b14a9-c86c-4ebd-8a0f-4e7db722796e",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              },
              "leftValue": "={{ JSON.parse('[\"UCIipmgxpUxDmPP-ma3Ahvbw\",\"UCWQf4EtNPWJSEiXEGv9y7nw\",\"UCn_38aaCktkBLPv3EtfmiUA\"]') }}",
              "rightValue": "={{ $json.snippet.resourceId.channelId }}"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7ae9354e-4dfb-43f3-ad09-d6e5b33e2a81",
      "name": "Filter out channels",
      "type": "n8n-nodes-base.filter",
      "position": [
        680,
        -135
      ],
      "notesInFlow": true,
      "typeVersion": 2.2,
      "notes": "Optional step"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/actor-tasks/energetic_antenna~youtube-transcript-scraper-task/run-sync-get-dataset-items",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"videoUrl\": \"https://www.youtube.com/watch?v={{ $json.id }}\"\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 5000
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1780,
        -285
      ],
      "id": "8f6f0130-74f6-4e99-a83f-1ddd166ba105",
      "name": "Get Youtube Transcripts",
      "credentials": {
        "httpBearerAuth": {
          "id": "yIuLFBZJ2qqkVMcG",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "language": "python",
        "pythonCode": "texts = []\nfor row in _json['data']:\n    if 'text' in row:\n        texts.append(row['text'])\n\nfinal = {\n  'script': ' '.join(texts)\n}\n\nreturn final"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        -285
      ],
      "id": "0370c5f1-b178-459d-84cc-d21f6c5c70d4",
      "name": "Code"
    },
    {
      "parameters": {
        "chunkingMode": "advanced",
        "options": {
          "summarizationMethodAndPrompts": {
            "values": {
              "combineMapPrompt": "다음 내용을 간결하게 요약해 주세요,:\n\n\"{text}\"\n\n간결한 요약:",
              "prompt": "=당신은 유튜브 영상 요약 전문가입니다. 당신의 임무는 유튜브 영상의 내용을 읽고, 주요 주제와 핵심 메시지를 파악하여 간결하고 명확하게 요약하는 것입니다.\n\n작업 지침:\n1. 아래 자막 내용을 분석하여, 어떤 주제들이 다뤄졌는지 파악하세요.\n2. 반복되거나 불필요한 말은 제거하고, 중요한 정보만을 남기세요.\n3. 영상의 핵심이 되는 여러 주제가 있다면 소주제로 나누고, 각 소주제 대한 요약을 불렛 포인트로 2줄 이내로 정리해주세요.\n4. 요약은 너무 길지 않게, 핵심만을 담아 전달해 주세요.\n\n출력 형식:\n- 전체 요약은 문단 또는 불렛 포인트 형식으로 정리할 수 있습니다.\n- 필요시 소주제별로 구조화해서 각 소주제에 대해 요약 정리해도 좋습니다. 이때 소주제는 (1), (2), (3) 등의 숫자로 구분해주세요.\n- 문체는 객관적이고 깔끔하게 작성해 주세요.\n\n아래는 자막 내용입니다:\n\n\"{text}\""
            }
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainSummarization",
      "typeVersion": 2.1,
      "position": [
        3100,
        -760
      ],
      "id": "21f175a0-a892-418f-a9ae-6617c98d1c78",
      "name": "Summarization Chain"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3128,
        -540
      ],
      "id": "dbc9232c-175f-4297-9103-b27bacbbf38e",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "Leo8yrirPIOn81hp",
          "name": "Google Gemini Chat Model"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1780,
        15
      ],
      "id": "2cf59fc9-757c-4574-980e-4e1f45bea7b2",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.textSplitterTokenSplitter",
      "typeVersion": 1,
      "position": [
        3248,
        -540
      ],
      "id": "5d0dd415-746c-4328-a64c-168574297bca",
      "name": "Token Splitter"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "StYeaUVkuM65MJ7h",
          "mode": "list",
          "cachedResultName": "n8n_qdrant_vectorize"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [
            "transcripts"
          ],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        3696,
        -360
      ],
      "id": "b2995d71-ff9b-40b2-9660-f31513a055f1",
      "name": "Execute Workflow",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "youtube_scripts",
          "mode": "list",
          "cachedResultName": "youtube_scripts"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "is_vectorized": true,
            "id": "={{ $json.id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "channeltitle",
              "displayName": "channeltitle",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "is_vectorized",
              "displayName": "is_vectorized",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "transcripts",
              "displayName": "transcripts",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3916,
        -310
      ],
      "id": "a527cc4e-0db2-46d6-b007-fd72b36f91d3",
      "name": "Postgres3",
      "credentials": {
        "postgres": {
          "id": "zzr7gmvUCrOHnErv",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2220,
        -210
      ],
      "id": "710dab8e-a848-463a-b755-d5c1870a7946",
      "name": "Merge"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "81e10193-152f-4f10-ada5-1087c13890de",
              "leftValue": "={{ $json.script }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2440,
        -210
      ],
      "id": "2bcf9b06-0840-4a4b-8f5f-ca2aa6693484",
      "name": "If"
    },
    {
      "parameters": {
        "chatId": "8123636831",
        "text": "=⚠️ 아래 유튜브 영상에 대한 스크립트가 없습니다. 아래 링크를 통해 직접 영상을 확인해보세요.\n🎬 제목: {{ $('If').item.json.snippet.title }}\n🔗 바로 보기: https://www.youtube.com/watch?v={{ $('If').item.json.id }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2660,
        -40
      ],
      "id": "cc0516e0-6842-437f-a3c7-9910119731ff",
      "name": "Send a text message",
      "webhookId": "e8417114-30b6-4168-a4f3-f053ad6fc048",
      "credentials": {
        "telegramApi": {
          "id": "iDYsysbbQ4q9DTCd",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "youtube_scripts",
          "mode": "list",
          "cachedResultName": "youtube_scripts"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "is_vectorized": false,
            "id": "={{ $json.id }}",
            "title": "={{ $json.snippet.title }}",
            "transcripts": "={{ $json.script }}",
            "channeltitle": "={{ $json.snippet.channelTitle }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "channeltitle",
              "displayName": "channeltitle",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "is_vectorized",
              "displayName": "is_vectorized",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "transcripts",
              "displayName": "transcripts",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "skipOnConflict": true,
          "replaceEmptyStrings": true
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2660,
        -235
      ],
      "id": "3f7a3df5-1f88-4e53-bfd3-8d524439fb22",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "zzr7gmvUCrOHnErv",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3476,
        -235
      ],
      "id": "a2b3c9f0-de62-49b0-86a8-e1744d5b6f47",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "youtube_scripts",
          "mode": "list",
          "cachedResultName": "youtube_scripts"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2880,
        -235
      ],
      "id": "4a13aec2-91d5-4b34-995d-246ca3e851ed",
      "name": "Select rows from a table",
      "credentials": {
        "postgres": {
          "id": "zzr7gmvUCrOHnErv",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "69bdafc4-82c3-4aa7-ab79-9fe1098dd205",
              "leftValue": "={{ $json.is_vectorized }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3178,
        -235
      ],
      "id": "e8aefcdd-39c8-4300-b587-4f3f12a27219",
      "name": "If1"
    },
    {
      "parameters": {
        "amount": 60
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4136,
        -235
      ],
      "id": "ece31a55-a22b-453b-b695-63934187230f",
      "name": "Wait",
      "webhookId": "f916128f-adea-4847-8c13-a5e4bbef8518"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2660,
        -680
      ],
      "id": "536e5629-4a0f-4c0b-81ae-ba78be7a2868",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "amount": 60
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3696,
        -685
      ],
      "id": "1e704c96-af1c-407d-9149-2c5b87fd9b36",
      "name": "Wait1",
      "webhookId": "6bcd6ec7-6216-4c87-8d0a-ef8d407d967a"
    },
    {
      "parameters": {
        "chatId": "8123636831",
        "text": "=📢 요약된 영상 내용입니다.\n📌 채널: {{ $('If').item.json.snippet.channelTitle }}\n🎬 제목: {{ $('If').item.json.snippet.title }}\n🔗 바로 보기: https://www.youtube.com/watch?v={{ $('If').item.json.id }}\n✨ 요약 내용:\n{{ $json.output.text }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3476,
        -760
      ],
      "id": "68874bac-de16-4c01-a371-6f5ff3eec3f7",
      "name": "Send a text message1",
      "webhookId": "8ededcea-5374-44f4-834c-1d8d726f25e8",
      "credentials": {
        "telegramApi": {
          "id": "iDYsysbbQ4q9DTCd",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4ea99fd0-b4fe-4f41-9af9-13c326a1e7c0",
              "name": "script",
              "value": "={{ $json.script }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2880,
        -760
      ],
      "id": "d8171bd1-e902-450b-83d0-4a20ce7964f4",
      "name": "Edit Fields"
    }
  ],
  "pinData": {},
  "connections": {
    "Check for errors": {
      "main": [
        [
          {
            "node": "If the HTTP request failed, throw the error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split out subscriptions to process individually",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get my subscriptions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter out shorts": {
      "main": [
        [
          {
            "node": "Get Youtube Transcripts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get video details": {
      "main": [
        [
          {
            "node": "Filter out shorts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter out channels": {
      "main": [
        [
          {
            "node": "Get latest 15 videos of each channel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get my subscriptions": {
      "main": [
        [
          {
            "node": "Check for errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get latest 15 videos of each channel": {
      "main": [
        [
          {
            "node": "Keep only videos published since last run",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Only keep channels with unwatched videos": {
      "main": [
        [
          {
            "node": "Filter out channels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keep only videos published since last run": {
      "main": [
        [
          {
            "node": "Get video details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split out subscriptions to process individually": {
      "main": [
        [
          {
            "node": "Only keep channels with unwatched videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Youtube Transcripts": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Summarization Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Summarization Chain": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Token Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Summarization Chain",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Postgres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert rows in a table": {
      "main": [
        [
          {
            "node": "Select rows from a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres3": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select rows from a table": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message1": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Summarization Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "42b98145-41ea-43b7-8529-8ffac67c862d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "xtd0DK0BKHdUP4tY",
  "tags": []
}